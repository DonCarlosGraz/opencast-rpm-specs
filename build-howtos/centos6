Step-By-Step: Building an Opencast Matterhorn RPM repository on CentOS 6
==============================================================================

Notice: For more Information about RPM creation have a look at the excellent
        howto in the Fedora Wiki located at:
        http://fedoraproject.org/wiki/How_to_create_an_RPM_package

For this walkthrough a fresh installed CentOS 6.2.x86_64 system was used after
installing the OS the only thing I did was to install the latest updates by
running »yum update«.

Step 1: System Preparation
--------------------------

# Install needed packages for RPM development:
yum groupinstall Base 'Development Tools'
yum install rpmdevtools.noarch rpmlint.noarch createrepo.noarch

# Create new user for RPM development. It's best to have a separate user for
# this. At least you should never create RPMs as root as one little mistake in
# the SPEC files which would simple give you an error as non privileged user
# could break your whole system as root.
/usr/sbin/useradd makerpm
passwd makerpm
su makerpm

# Create the ~/rpmbuild directory and a set of subdirectories, which you will
# use for creating the packages.
cd
rpmdev-setuptree


Step 2: Install build dependencies
----------------------------------

# Enable EPEL and Rpmforge repositories.
yum localinstall --nogpgcheck \
  http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm

Step 3: Get source RPMs
-------------------------------------------------

The next step is to download all necessary source RPMs. You can do this
manually or even install them via rpm over http, however I suggest using the
download script yu can find in the SRPMS folder.

 * One way:
	%> cd SRPMS/
	%> ./download-srpms.sh

 * Another way:
	- Go to http://lernfunk.de/matterhorn-repo/SRPMS/ 
	- Download what you need.


Step 4: Build binary RPMs
-------------------------------------------------

Now we have to build the RPMs one after another. Obviously we have to start
with those which do not depend on ones we still have to build. After we build a
package we have to check if another package we want to build depends on it. If
that is the case we have to install the new package. Then we can move to the
next package.

Following you will find a list of commands you have to execute. We will use
»yum-builddep <SPECFILE>« to install the build dependencies and »rpmbuild -ba
<SPECFILE>« to build a package. The ready to use RPM file will go into
~/rpmbuild/RPMS/<ARCH>/. At the end we install the new package using »yum
localinstall <PACKAGE>.rpm«.


# EXAMPLE: Build Quicktime subtitle embedder and dependencies:

# Switch to SPEC folder:
cd rpmbuild/SPECS

# Install build dependencies for mp4v2:
yum-builddep mp4v2.spec
# Build RPMs for mp4v2:
rpmbuild -ba mp4v2.spec

# Install build dependencies for qt_sbtl_embedder:
su -c 'yum localinstall \
  ~/rpmbuild/RPMS/x86_64/mp4v2-1*.rpm \
  ~/rpmbuild/RPMS/x86_64/mp4v2-devel-*.rpm'
yum-builddep qt_sbtl_embedder.spec
# Build RPMs for qt_sbtl_embedder:
rpmbuild -ba qt_sbtl_embedder.spec


If we would have tried to build the qt_sbtl_embedder package before we had
build and installed mp4v2 yum-builddep would have complained that mp4v2 is not
installed but could also not be found in the activated repositories. So we had
to build it first.

Now you have to continue with this process until all packages are build.


Step 4: Create repository for RPM files
---------------------------------------

The next step is to generate a repository for all created RPMs. It should be
put in a place which is available from all systems you want to use it for.
Common ways to do this are to put the repository on a FTP or HTTP server or do
a SSH mount. Of cause you can place the repo in a local file system, too. But
the other ways are easier to maintain when it comes to updates, etc.

Commands (You may ommit everything related to the SRPMS):
mkdir -p ~/matterhorn-repo/CentOS/6/{noarch,SRPMS,x86_64}
cp -r ~/rpmbuild/RPMS/x86_64/* ~/matterhorn_repo/CentOS/6/x86_64 
cp -r ~/rpmbuild/RPMS/noarch/* ~/matterhorn_repo/CentOS/6/noarch 
cp -r ~/rpmbuild/SRPMS/*       ~/matterhorn_repo/CentOS/6/SRPMS
createrepo ~/matterhorn_repo/CentOS/6/x86_64
createrepo ~/matterhorn_repo/CentOS/6/noarch

That is it. Your repo in now finished. Put it somewhere reachable. For example
you can use the Apache http daemon to distribute it via the HTTP protocol.
cp -r ~/matterhorn-repo /var/www/html/


Step 5: Enable repository
-------------------------
Lets assume your repo is now reachable via »http://example.com/matterhorn-repo«.
Create the file »/etc/yum.repos.d/matterhorn.repo« using your favorite editor and
enter:


[matterhorn]
name = Matterhorn CentOS $releasever Repository
baseurl  = http://example.com/matterhorn_repo/CentOS/$releasever/$basearch
enabled  = 1
protect  = 0
gpgcheck = 0

[matterhorn-noarch]
name = Matterhorn CentOS $releasever Repository noarch
baseurl  = http://example.com/matterhorn_repo/CentOS/$releasever/noarch
enabled  = 1
protect  = 0
gpgcheck = 0


NOTICE: While on CentOS $releasever will be the major version only (i.e. 6) on
		  Scientific Linux in will contain the minor version, too (i.e. 6.3).
		  Thus you should either rename your repository accordingly or create
		  symbolic links (»ln -s 6 6.3«). I use the latter.

Now your repository is enabled for use with yum (and other rpm based update
managers). You can now simply copy this file to any computer you want to use
the repository on.
